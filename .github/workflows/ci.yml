name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'release/**'
  pull_request:
    branches:
      - main

jobs:
  base:
    strategy:
      fail-fast: false
      matrix:
        gem:
          - resource_detectors
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    name: "opentelemetry-${{ matrix.gem }} / ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: "Test Ruby 3.1"
        uses: ./.github/actions/test_gem
        with:
          gem: "opentelemetry-${{ matrix.gem }}"
          ruby: "3.1"
      - name: "Test Ruby 3.0"
        if: "${{ matrix.os == 'ubuntu-latest' }}"
        uses: ./.github/actions/test_gem
        with:
          gem: "opentelemetry-${{ matrix.gem }}"
          ruby: "3.0"
      - name: "Test Ruby 2.7"
        if: "${{ matrix.os == 'ubuntu-latest' }}"
        uses: ./.github/actions/test_gem
        with:
          gem: "opentelemetry-${{ matrix.gem }}"
          ruby: "2.7"
          yard: true
          rubocop: true
          build: true
      - name: "Test JRuby"
        if: "${{ matrix.os == 'ubuntu-latest' }}"
        uses: ./.github/actions/test_gem
        with:
          gem: "opentelemetry-${{ matrix.gem }}"
          ruby: "jruby"
      - name: "Test truffleruby"
        if: "${{ matrix.os == 'ubuntu-latest' }}"
        uses: ./.github/actions/test_gem
        with:
          gem: "opentelemetry-${{ matrix.gem }}"
          ruby: "truffleruby"

  propagators:
    strategy:
      fail-fast: false
      matrix:
        gem:
          - ottrace
          - xray
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    name: "propagator-${{ matrix.gem }} / ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: "Test Ruby 3.1"
        uses: ./.github/actions/test_gem
        with:
          gem: "opentelemetry-propagator-${{ matrix.gem }}"
          ruby: "3.1"
      - name: "Test Ruby 3.0"
        if: "${{ matrix.os == 'ubuntu-latest' }}"
        uses: ./.github/actions/test_gem
        with:
          gem: "opentelemetry-propagator-${{ matrix.gem }}"
          ruby: "3.0"
      - name: "Test Ruby 2.7"
        if: "${{ matrix.os == 'ubuntu-latest' }}"
        uses: ./.github/actions/test_gem
        with:
          gem: "opentelemetry-propagator-${{ matrix.gem }}"
          ruby: "2.7"
          yard: true
          rubocop: true
          build: true
      - name: "Test JRuby"
        if: "${{ matrix.os == 'ubuntu-latest' }}"
        uses: ./.github/actions/test_gem
        with:
          gem: "opentelemetry-propagator-${{ matrix.gem }}"
          ruby: "jruby"
      - name: "Test truffleruby"
        if: "${{ matrix.os == 'ubuntu-latest' }}"
        uses: ./.github/actions/test_gem
        with:
          gem: "opentelemetry-propagator-${{ matrix.gem }}"
          ruby: "truffleruby"

  instrumentation:
    strategy:
      fail-fast: false
      matrix:
        gem:
          - action_pack
          - action_view
          - active_job
          - active_model_serializers
          - active_record
          - active_support
          - all
          - aws_sdk
          - base
          - concurrent_ruby
          - delayed_job
          - ethon
          - excon
          - faraday
          - graphql
          - http
          - http_client
          - koala
          - lmdb
          - net_http
          - rack
          - rails
          - restclient
          - rspec
          - sinatra
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        exclude:
          - os: windows-latest
            gem: ethon
          - os: windows-latest
            gem: action_pack
          - os: windows-latest
            gem: restclient
          - os: windows-latest
            gem: rails
          - os: macos-latest
            gem: lmdb

    name: ${{ matrix.gem }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: "Test Ruby 3.1"
        uses: ./.github/actions/test_gem
        with:
          gem:  "opentelemetry-instrumentation-${{ matrix.gem }}"
          ruby: "3.1"
      - name: "Test Ruby 3.0"
        if: "${{ matrix.os == 'ubuntu-latest' }}"
        uses: ./.github/actions/test_gem
        with:
          gem:  "opentelemetry-instrumentation-${{ matrix.gem }}"
          ruby: "3.0"
      - name: "Test Ruby 2.7"
        if: "${{ matrix.os == 'ubuntu-latest' }}"
        uses: ./.github/actions/test_gem
        with:
          gem:  "opentelemetry-instrumentation-${{ matrix.gem }}"
          ruby: "2.7"
          yard: true
          rubocop: true
          build: true
      - name: "JRuby Filter"
        id: jruby_skip
        shell: bash
        run: |
          echo "::set-output name=skip::false"
          [[ "${{ matrix.gem }}" == "action_pack"              ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "action_view"              ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "active_model_serializers" ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "active_record"            ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "active_support"           ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "aws_sdk"                  ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "delayed_job"              ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "graphql"                  ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "http"                     ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "http_client"              ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "koala"                    ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "lmdb"                     ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "rack"                     ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "rails"                    ]] && echo "::set-output name=skip::true"
          # This is essentially a bash script getting evaluated, so we need to return true or the whole job fails.
          true
      - name: "Test JRuby"
        if: "${{ matrix.os == 'ubuntu-latest' && steps.jruby_skip.outputs.skip == 'false' }}"
        uses: ./.github/actions/test_gem
        with:
          gem: "opentelemetry-instrumentation-${{ matrix.gem }}"
          ruby: "jruby"
      - name: "Truffleruby Filter"
        id: truffleruby_skip
        shell: bash
        run: |
          echo "::set-output name=skip::false"
          [[ "${{ matrix.gem }}" == "action_pack"    ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "action_view"    ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "active_job"     ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "active_record"  ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "active_support" ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "delayed_job"    ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "lmdb"           ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "rails"          ]] && echo "::set-output name=skip::true"
          # This is essentially a bash script getting evaluated, so we need to return true or the whole job fails.
          true
      - name: "Test Truffleruby"
        if: "${{ matrix.os == 'ubuntu-latest' && steps.truffleruby_skip.outputs.skip == 'false' }}"
        uses: ./.github/actions/test_gem
        with:
          gem:  "opentelemetry-instrumentation-${{ matrix.gem }}"
          ruby: "truffleruby"

  # These builds require sidecar services (postgres, redis, etc) in order to run their test suites.
  instrumentation_with_services:
    strategy:
      fail-fast: false
      # We don't run on macos and windows since service containers aren't supported there.
      matrix:
        gem:
          - bunny
          - dalli
          - mongo
          - mysql2
          - pg
          - que
          - rdkafka
          - redis
          - resque
          - ruby_kafka
          - sidekiq
          - trilogy
    name: ${{ matrix.gem }} / ubuntu-latest / services
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Test Ruby 3.1"
        uses: ./.github/actions/test_gem
        with:
          gem:  "opentelemetry-instrumentation-${{ matrix.gem }}"
          ruby: "3.1"
      - name: "Test Ruby 3.0"
        uses: ./.github/actions/test_gem
        with:
          gem:  "opentelemetry-instrumentation-${{ matrix.gem }}"
          ruby: "3.0"
      - name: "Test Ruby 2.7"
        uses: ./.github/actions/test_gem
        with:
          gem:  "opentelemetry-instrumentation-${{ matrix.gem }}"
          ruby: "2.7"
          yard: true
          rubocop: true
          build: true
      - name: "JRuby Filter"
        id: jruby_skip
        shell: bash
        run: |
          echo "::set-output name=skip::false"
          [[ "${{ matrix.gem }}" == "bunny"      ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "mysql2"     ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "pg"         ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "que"        ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "rdkafka"    ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "redis"      ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "resque"     ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "ruby_kafka" ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "sidekiq"    ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "trilogy"    ]] && echo "::set-output name=skip::true"
          # This is essentially a bash script getting evaluated, so we need to return true or the whole job fails.
          true
      - name: "Test JRuby"
        if: "${{ steps.jruby_skip.outputs.skip == 'false' }}"
        uses: ./.github/actions/test_gem
        with:
          gem:  "opentelemetry-instrumentation-${{ matrix.gem }}"
          ruby: "jruby"
      - name: "Truffleruby Filter"
        id: truffleruby_skip
        shell: bash
        run: |
          echo "::set-output name=skip::false"
          [[ "${{ matrix.gem }}" == "que"        ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "rdkafka"    ]] && echo "::set-output name=skip::true"
          [[ "${{ matrix.gem }}" == "ruby_kafka" ]] && echo "::set-output name=skip::true"
          # This is essentially a bash script getting evaluated, so we need to return true or the whole job fails.
          true
      - name: "Test Truffleruby"
        if: "${{ steps.truffleruby_skip.outputs.skip == 'false' }}"
        uses: ./.github/actions/test_gem
        with:
          gem:  "opentelemetry-instrumentation-${{ matrix.gem }}"
          ruby: "truffleruby"
    services:
      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        ports:
          - 2181:2181
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
      kafka:
        image: confluentinc/cp-kafka:latest
        ports:
          - 9092:9092
          - 29092:29092
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://localhost:9092
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      memcached:
        image: memcached:alpine
        ports:
          - 11211:11211
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
      redis:
        image: bitnami/redis:6.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          REDIS_PASSWORD: "passw0rd"
      mysql:
        image: mysql:5.6
        env:
          MYSQL_DATABASE: mysql
          MYSQL_ROOT_PASSWORD: root
          MYSQL_PASSWORD: mysql
          MYSQL_USER: mysql
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
      rabbitmq:
        image: rabbitmq:3.8-alpine
        ports:
          - "5672:5672"
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=5s --health-timeout=2s --health-retries=3
